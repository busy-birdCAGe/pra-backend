AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: Backend for the Prayer Request App

Parameters:
  env:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - prod

Resources:
  AuthService:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt PRAServiceRole.Arn
      CodeUri: .
      Handler: dist/src/services/auth/app.handler
      Runtime: nodejs16.x
      Events:
        Authorized:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /authorized
            Method: GET
            Auth:
              Authorizer: CognitoAuthorizer
        SignUp:
          Type: HttpApi
          Properties:
            Path: /signup
            Method: POST
            ApiId: !Ref HttpApi
        SignIn:
          Type: HttpApi
          Properties:
            Path: /signin
            Method: POST
            ApiId: !Ref HttpApi
      MemorySize: 128
      Timeout: 60

  RequestsService:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt PRAServiceRole.Arn
      CodeUri: .
      Handler: dist/src/services/requests/app.handler
      Runtime: nodejs16.x
      Events:
        CreateRequest:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpApi
            Path: /requests
            Method: POST
            Auth:
              Authorizer: CognitoAuthorizer
        GetRequestsByChurches:
          Type: HttpApi
          Properties:
            Path: /requests
            Method: GET
            ApiId: !Ref HttpApi
            Auth:
              Authorizer: CognitoAuthorizer
      MemorySize: 128
      Timeout: 60

  PRAServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${env}-PRAServiceRole"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: PRAServiceRole
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                  - ssm:GetParameters
                Resource: '*'

  HttpApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      Auth:
        Authorizers:
          CognitoAuthorizer:
            IdentitySource: "$request.header.Authorization"
            JwtConfiguration:
              Audience:
                - !Ref CognitoUserPoolClient
              Issuer: !GetAtt CognitoUserPool.ProviderURL
      CorsConfiguration:
        AllowOrigins:
          - '*'
        AllowMethods:
          - GET
          - POST
          - PUT
          - DELETE
        AllowHeaders:
          - '*'

  FrontEndBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${env}-prayer-request-app"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      WebsiteConfiguration:
        IndexDocument: index.html

  FrontEndBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref FrontEndBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal: "*"
            Action: "s3:GetObject"
            Resource: !Join ["", ["arn:aws:s3:::", !Ref FrontEndBucket, "/*"]]

  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub "${env}-prayer-request-app"
      DeletionProtection: "ACTIVE"
      UsernameAttributes:
        - email
      AutoVerifiedAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireNumbers: true
      AdminCreateUserConfig:
        UnusedAccountValidityDays: 7
      MfaConfiguration: "OFF"
      AccountRecoverySetting:
        RecoveryMechanisms:
          - Name: verified_email
            Priority: 1
      Schema:
        - Name: email
          Required: true
          Mutable: true
      VerificationMessageTemplate:
        DefaultEmailOption: CONFIRM_WITH_LINK

  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: !Sub "${env}-prayer-request-app"
      UserPoolId: !Ref CognitoUserPool
      GenerateSecret: false

  CognitoUserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: !Sub "${env}-prayer-request-app-domain"
      UserPoolId: !Ref CognitoUserPool
